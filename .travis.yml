---
# Suggested tools that can save round-trips to github and a lot of time:
#
# yamllint .travis.yml
# ~/.gem/ruby/2.7.0/bin/travis lint .travis.yml
# yaml merge-expand .travis.yml exp.yml && diff -b -u .travis.yml exp.yml

language: c
dist: bionic

git:
  depth: 20

before_install:
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get update -qq
  - sudo apt-get install -y python-ply python-git libelf-dev codespell fakeroot gcc-9 g++-9 gcc-aarch64-linux-gnu
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9
  - sudo apt-get install -y xz-utils lftp

install:
  - git clone --depth 5 https://github.com/thesofproject/kconfig.git
  - pushd kconfig
  - &short_log git --no-pager log --oneline --graph --decorate --max-count=5
  - popd
  - mkdir 0day
  - wget https://raw.githubusercontent.com/intel/lkp-tests/master/sbin/make.cross -O make.cross
  - chmod +x make.cross
  - mkdir -p $PWD/bin
  - git clone --depth 1 --branch v0.6.2 git://git.kernel.org/pub/scm/devel/sparse/sparse.git
  - BINDIR=$PWD/bin make -C sparse install
  - export PATH=$PWD/bin:$PATH

jobs:
  include:
    - if: type = pull_request
      # These two are combined because they both need a merge base and
      # locally unshallowing .git/ seems time consuming for some reason.
      # Without the merge base, the --xxxstats will either fail or be
      # wrong and checkpatch prints confusing garbage.
      name: checkpatch and age of git base
      script:
        # Start with some visual and plain English context. A picture is
        # worth thousand words and makes all the rest less abstract.
        - *short_log
        - git --no-pager log --oneline --graph --decorate
                                    --max-count=5 "${TRAVIS_BRANCH}"
        # If the merge base is missing then the shallow depth
        # optimization has _already_ failed because Travis' already
        # fetched practically the entire history with a "git fetch
        # github pulls/1234/merge" command. The very long duration of
        # that earlier fetch merge command is hidden in Travis logs
        # under the git clone command _wrongly_ advertised as quick!
        - git merge-base "${TRAVIS_PULL_REQUEST_SHA}" "${TRAVIS_BRANCH}" ||
              git fetch --unshallow https://github.com/"${TRAVIS_REPO_SLUG}"
                "${TRAVIS_BRANCH}"
        # Show how "late" the PR base is
        - |
          # Tests are run on the PR merged with this extra code from the
          # (moving) target branch:
          git diff --shortstat --dirstat \
              "${TRAVIS_PULL_REQUEST_SHA}"..."${TRAVIS_BRANCH}"
        # Use set -x to expand all values in the log.
        # No double dot '..' so rev-list fails if a TRAVIS_ variable is missing
        - set -x; behind=$(git rev-list --no-merges
            ^"${TRAVIS_PULL_REQUEST_SHA}" "${TRAVIS_BRANCH}" | wc -l) ; set +x
        # Note $behind is NOT comparable to clone depth in repos with merges.
        - '[ "$behind" -lt 1000 ] # is the PR base too far behind?'

        # New Ubuntu 20.04 location
        - sudo mkdir -p /usr/share/codespell && sudo ln -s
           /usr/lib/python3/dist-packages/codespell_lib/data/dictionary.txt
           /usr/share/codespell/dictionary.txt
        # TODO: stop screen-scraping the git log and switch to
        # ${TRAVIS_COMMIT_RANGE} or ${TRAVIS_BRANCH}..HEAD after testing
        # both force pushes and not.
        # Note TRAVIS_COMMIT_RANGE has triple dots for "git diff" and
        # needs conversion to double dots for git log's inconsistent
        # user interface.
        - printf '%s %s\n' "${TRAVIS_BRANCH}" "${TRAVIS_COMMIT_RANGE/.../..}"
        - SHA_PR=`git log --oneline -1 | sed -rn "s/.*Merge (.*) into.*/\1/p"`
        - SHA_MAIN=`git log --oneline -1 | sed -rn "s/.*Merge .* into (.*)/\1/p"`
        - ( set -x; scripts/checkpatch.pl --strict --codespell -g $SHA_MAIN..$SHA_PR )

    - name: Sparse check
      script:
        - export ARCH=x86_64
        - bash kconfig/kconfig-sof-default.sh
        - make modules_prepare
        - make M=sound/soc/sof C=2
    - name: "BUILD GCC9 SOF Kernel x86_64"
      script:
        - export ARCH=x86_64 KCFLAGS="-Wall -Werror"
        - bash kconfig/kconfig-sof-default.sh
        - make modules_prepare
        - make -j`getconf _NPROCESSORS_ONLN` sound/ W=1
        - make -j`getconf _NPROCESSORS_ONLN` drivers/soundwire/ W=1
        - make -j`getconf _NPROCESSORS_ONLN`
        - make -j`getconf _NPROCESSORS_ONLN` bindeb-pkg
    - name: "BUILD GCC9 SST Kernel x86_64"
      script:
        - export ARCH=x86_64
        - bash kconfig/kconfig-sst.sh
        - KCFLAGS="-Wall -Werror" make -j`getconf _NPROCESSORS_ONLN`
    - name: "BUILD GCC9 SOF Kernel i386"
      script:
        - export ARCH=i386 KCFLAGS="-Wall -Werror"
        - bash kconfig/kconfig-sof-default.sh
        - make modules_prepare
        - make -j`getconf _NPROCESSORS_ONLN` sound/
        - make -j`getconf _NPROCESSORS_ONLN` drivers/soundwire/
        - make -j`getconf _NPROCESSORS_ONLN`
    - name: "BUILD GCC9 SOF Kernel arm64"
      script:
        - export ARCH=arm64 CROSS_COMPILE=/usr/bin/aarch64-linux-gnu-
        - bash kconfig/kconfig-sof-arm64.sh
        - KCFLAGS="-Wall -Werror" make -j`getconf _NPROCESSORS_ONLN`
    - name: "BUILD CLANG SOF Kernel x86_64"
      script:
        - bash kconfig/kconfig-sof-default.sh
        - COMPILER_INSTALL_PATH=$PWD/0day COMPILER=clang ./make.cross ARCH=x86_64 olddefconfig
        - COMPILER_INSTALL_PATH=$PWD/0day COMPILER=clang ./make.cross ARCH=x86_64
